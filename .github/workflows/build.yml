name: Build

on:
  workflow_dispatch:
    inputs:
      source:
        description: "Source"
        required: true
        default: "mainline"
      commit:
        description: "Commit message"
        required: true
        default: ""
      tag:
        description: "Tag"
        required: true
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Lua/LuaJIT
        uses: leafo/gh-actions-lua@v10

      - name: Install tree sitter languages
        run: python -m pip install tree_sitter_languages

      - name: Pull Source
        run: |
          git clone -q https://github.com/Ketho/BlizzardInterfaceResources.git source
          git -C source checkout ${{ github.event.inputs.source }}

      - name: Get Constants
        run:
          wget -O $GITHUB_WORKSPACE/source/Resources/Constants.lua https://raw.githubusercontent.com/tomrus88/BlizzardInterfaceCode/master/Interface/AddOns/Blizzard_FrameXMLBase/Constants.lua

      - name: Get Constants Parsing Script
        run:
          wget -O $GITHUB_WORKSPACE/source/Resources/parse_constants.py https://raw.githubusercontent.com/clicketz/files/master/parse_constants.py

      - name: Create Script
        run: |
          cat <<EOF > parse.lua
            local GITHUB_WORKSPACE = arg[1]
            local SOURCE_PATH = string.format('%s/%s', GITHUB_WORKSPACE,
                                              'source/Resources/%s')

            local function getValues(tbl, result)
                result = result or {}
                local i = 1
                while i <= #tbl do
                    local parent, value = string.match(tbl[i], '([%a%d_]+)%.([%a%d_]+)')
                    if parent then
                        local fields = {value}
                        result[parent] = {fields = fields}
                        for j = i + 1, #tbl do
                            value = string.match(tbl[j], parent .. '%.([%a%d_]+)')
                            if value then
                                fields[#fields + 1] = value
                            else
                                i = j - 1
                                break
                            end
                        end
                    else
                        result[#result + 1] = tbl[i]
                    end
                    i = i + 1
                end
                return result
            end

            local function parseGlobals(tbl, result)
                result = result or {}
                for k, v in pairs(tbl) do
                    if k ~= '_G' then
                        if type(v) == 'table' then
                            result[k] = {fields = {}}
                            parseGlobals(v, result[k].fields)
                        else
                            result[#result + 1] = k
                        end
                    end
                end
                return result
            end

            local read_globals = {'LibStub'}
            local env = {}
            env._G = env
            
            local function insert(tbl)
                for k, v in pairs(tbl) do
                    if type(k) == 'number' then
                        read_globals[#read_globals + 1] = v
                    elseif type(k) == 'string' then
                        read_globals[k] = v
                    end
                end
            end

            local SINGLE_TABLE_FILES = { 'Mixins.lua', 'Constants_Parsed.lua' }
            for i = 1, #SINGLE_TABLE_FILES do
                insert(getValues(loadfile(string.format(SOURCE_PATH, SINGLE_TABLE_FILES[i]), "t", env)()))
            end

            local MULTI_TABLE_FILES = { 'GlobalAPI.lua', 'FrameXML.lua', 'Frames.lua' }
            for i = 1, #MULTI_TABLE_FILES do
                local tbl = loadfile(string.format(SOURCE_PATH, MULTI_TABLE_FILES[i]), "t", env)()
                for j = 1, #tbl do insert(getValues(tbl[j])) end
            end

            local GLOBAL_FILES = { 'LuaEnum.lua', 'GlobalStrings/enUS.lua' }
            for i = 1, #GLOBAL_FILES do
                loadfile(string.format('%s', GLOBAL_FILES[i]), 't', env)()
                insert(parseGlobals(env))
            end

            table.sort(read_globals)

            local file, errmsg = io.open(GITHUB_WORKSPACE .. '/.luacheckrc', 'w')
            if file then
                file:write('std = \'lua51\'', '\n')
                file:write('max_line_length = false', '\n')
                file:write('exclude_files = {\'**Libs/\', \'**libs/\'}', '\n')
                file:write('ignore = {', '\n')
                file:write('    \'11./SLASH_.*\', -- Setting an undefined (Slash handler) global variable', '\n')
                file:write('    \'11./BINDING_.*\', -- Setting an undefined (Keybinding header) global variable', '\n')
                file:write('    \'113/LE_.*\', -- Accessing an undefined (Lua ENUM type) global variable', '\n')
                file:write('    \'113/NUM_LE_.*\', -- Accessing an undefined (Lua ENUM type) global variable', '\n')
                file:write('    \'211\', -- Unused local variable', '\n')
                file:write('    \'211/L\', -- Unused local variable "L"', '\n')
                file:write('    \'211/CL\', -- Unused local variable "CL"', '\n')
                file:write('    \'212\', -- Unused argument', '\n')
                file:write('    \'213\', -- Unused loop variable', '\n')
                file:write('    \'214\', -- Unused hint', '\n')
                file:write('    -- \'231\', -- Set but never accessed', '\n')
                file:write('    \'311\', -- Value assigned to a local variable is unused', '\n')
                file:write('    \'314\', -- Value of a field in a table literal is unused', '\n')
                file:write('    \'42.\', -- Shadowing a local variable, an argument, a loop variable.', '\n')
                file:write('    \'43.\', -- Shadowing an upvalue, an upvalue argument, an upvalue loop variable.', '\n')
                file:write('    \'542\', -- An empty if branch', '\n')
                file:write('    \'581\', -- Error-prone operator orders', '\n')
                file:write('    \'582\', -- Error-prone operator orders', '\n')
                file:write('}', '\n')
                file:write('globals = {', '\n')
                file:write('    \'_G\', -- Global table', '\n')
                file:write('    \'bit\',', '\n')
                file:write('}', '\n')
                file:write('read_globals = ',
                    string.gsub(require('pprint').pformat(read_globals, {
                    indent_size = 4,
                    level_width = 120,
                    wrap_array = true
                }), '%s+\n', '\n'), '\n')
                file:write('', '\n')

                file:close()
            elseif errmsg then
                error(errmsg)
            else
                error('cannot create file')
            end

          EOF
      - name: Get 'pprint.lua'
        run: wget https://raw.githubusercontent.com/jagt/pprint.lua/master/pprint.lua

      - name: Parse Constants
        run: python parse_constants.py
        working-directory: source/Resources/

      - name: Parse
        run: lua parse.lua $GITHUB_WORKSPACE

      - name: Add & Commit
        uses: EndBug/add-and-commit@v9
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          add: '.luacheckrc'
          message: '${{ github.event.inputs.commit }}'
          tag: '${{ github.event.inputs.tag }} --force'
          tag_push: '--force'
